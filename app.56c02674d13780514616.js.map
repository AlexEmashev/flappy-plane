{"version":3,"sources":["webpack://flappy-plane/./src/settings.ts","webpack://flappy-plane/./src/models.ts","webpack://flappy-plane/./src/resources.ts","webpack://flappy-plane/./src/utils.ts","webpack://flappy-plane/./src/objects/bottom-clouds.ts","webpack://flappy-plane/./src/objects/button.ts","webpack://flappy-plane/./src/objects/plane.ts","webpack://flappy-plane/./src/objects/world.ts","webpack://flappy-plane/./src/objects/titles.ts","webpack://flappy-plane/./src/objects/clouds.ts","webpack://flappy-plane/./src/scenes/title-screen.ts","webpack://flappy-plane/./src/objects/pipes.ts","webpack://flappy-plane/./src/scenes/gameplay.ts","webpack://flappy-plane/./src/scenes/score-screen.ts","webpack://flappy-plane/./src/index.ts","webpack://flappy-plane/./src/app.ts"],"names":["aspectRatio","scaleFactor","worldWidth","worldHeight","gravity","defaultPlaneDeltaY","gameRefreshRate","canvasName","worldBackground","top","bottom","sprites","cloud1","cloud2","bottomClouds","titles","planes","pipeTop","pipeBottom","MouseEventTypeEnum","GameSceneEnum","PlaneStatesEnum","AnimationState","GameResourcesService","instance","this","_planeImg","Image","src","settings","_gameTitlesImg","_gameTitleSprite","sprite","gameTitlesImg","sx","sy","sWidth","sHeight","dx","dy","dWidth","dHeight","_gameOverSprite","_bottomCloudsImg","_cloud1Img","_cloud2Img","_pipeTopImg","_pipeBottomImg","_startButtonSprites","spriteCoordinatesX","map","spriteNumber","_againButtomSprites","spriteXCoordinates","_planeSprites","spriteHeight","planeImg","_planeUpSprites","planeSprites","slice","_planeDownSprites","getInstance","randomNumber","min","max","Math","floor","random","checkPointWithinBox","point","box","correctedBox","x1","x2","y1","y2","pointWithinX","x","pointWithinY","y","checkHitboxCollision","box1","box2","drawSprite","context","se","s","drawImage","width","height","drawText","textProps","font","fontSize","fontName","shadowColor","fillStyle","fillText","text","color","ButtonStateEnum","BottomClouds","play","currentSpritePosition","cloudTiles","push","gameResourcesService","cloudsHeight","cloudsWidth","animationState","cloud","cloudsSpeed","filter","lastCloud","length","lastCloudRightBorderCoordinate","Button","spriteNormal","spriteHover","spritePress","normal","spriteElement","eventType","pointerOverButton","hitbox","move","mouseMove","down","mouseDown","up","mouseUp","callback","hoverCallback","pressCallback","upCallback","clickCallback","buttonState","hover","isPointerOverButton","PLANE_POSITIONS","Plane","flyDown","_planeState","planeSprite","gameResources","position","state","getSpriteNumber","flyUp","planePosition","screenCenter","gameStart","currentSpriteFrame","GameWorld","_skyGradient","createLinearGradient","addColorStop","skyGradient","fillRect","Titles","score","fontWidth","offset","toString","finalScore","letterWidth","CLOUDS_SETTINGS","Clouds","getNewCloud","cloud3","clouds","speed","cloudSpriteNumber","yCoordinate","cloudSize","TitleScreen","world","plane","planeState","setPosition","startButton","resources","startButtonSprites","onClick","startButtonClick","mouseEventHandler","draw","drawGameTitle","goToStateCallback","Gameplay","PIPES_SETTINGS","gap","Pipes","pipes","getPipes","topPipe","bottomPipe","pipesGeneration","topPipeHitbox","bottomPipeHibox","pipesOffset","topPipeOffset","bottomPipeOffset","isGameOver","planeFlyUp","checkCollision","renderGameOverSequence","renderGamePlaySequence","updateScore","planeflyDown","drawScore","data","gameOverSequenceFrames","ScoreScreen","pause","planeDeltaY","updateGameScoreCallback","againButton","againButtonSprites","drawGameOverTitle","drawFinalScore","addCanvas","switchGameScene","setEventLoop","canvas","document","getElementById","setScale","getContext","window","onresize","onmousemove","e","userInput","offsetX","offsetY","onmousedown","onmouseup","setInterval","currentScene","render","sceneName","gameScore","updateGameScore","clientHeight","init"],"mappings":"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","file":"app.56c02674d13780514616.js","sourcesContent":["export default  {\n  aspectRatio: 0.5625,\n  scaleFactor: 1,\n  worldWidth: 360,\n  worldHeight: 640,\n  gravity: 0.5,\n  defaultPlaneDeltaY: 9,\n  gameRefreshRate: 24,\n  canvasName: 'GameCanvas',\n  worldBackground: {\n    top: '#4d9da5',\n    bottom: '#c1dcdf'\n  },\n  sprites: {\n    cloud1: 'assets/cloud1.svg',\n    cloud2: 'assets/cloud2.svg',\n    bottomClouds: 'assets/bottom_clouds.svg',\n    titles: 'assets/titles.svg',\n    planes: 'assets/planes_list.svg',\n    pipeTop: 'assets/pipe_top.svg',\n    pipeBottom: 'assets/pipe_bottom.svg',\n  }\n}","/**\n * Describes a sprite\n */\nexport interface ISprite {\n  sprite: HTMLImageElement,\n  x: number,\n  y: number,\n  width: number,\n  height: number\n}\n\n/**\n * Discribes single element from sprite set.\n */\nexport interface ISpriteElement {\n  sprite: HTMLImageElement,\n  sx: number;\n  sy: number;\n  sWidth: number;\n  sHeight: number;\n  dx: number;\n  dy: number;\n  dWidth: number;\n  dHeight: number;\n}\n\n/**\n * Describes hitbox of an object\n */\nexport interface IHitbox {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n}\n\n/**\n * Describes single point\n */\nexport interface IPoint {\n  x: number,\n  y: number\n}\n\n/**\n * Describes mouse event type\n */\nexport enum MouseEventTypeEnum {\n  move,\n  down,\n  up\n}\n\nexport interface ITextProperties {\n  text: string,\n  x: number,\n  y: number,\n  fontSize: number,\n  fontName: string,\n  color: string,\n  shadowColor?: string\n}\n\nexport enum GameSceneEnum {\n  TitleScreen = 'TitleScreen',\n  Gameplay = 'Gameplay',\n  ScoreScreen = 'ScoreScreen'\n}\n\nexport interface IGameScene {\n  data: {\n    [key: string]: any;\n  };\n  name: GameSceneEnum;\n  goToStateCallback?: (name: GameSceneEnum) => void;\n  userInput: (point: IPoint, eventType: MouseEventTypeEnum) => void;\n  render: Function;\n}\n\nexport enum PlaneStatesEnum {\n  flyDown = 'flyDown',\n  flyUp = 'flyUp',\n  crash = 'crash'\n}\n\nexport enum AnimationState {\n  play,\n  pause\n}","import {ISpriteElement} from './models';\nimport settings from './settings';\n\nclass GameResourcesService {\n  private static instance: GameResourcesService;\n\n  private _planeImg: HTMLImageElement;\n  private get planeImg(): HTMLImageElement {\n    if (!this._planeImg) {\n      this._planeImg = new Image();\n      this._planeImg.src = settings.sprites.planes;\n    }\n\n    return this._planeImg;\n  }\n\n  private _gameTitlesImg: HTMLImageElement;\n  private get gameTitlesImg(): HTMLImageElement {\n    if (!this._gameTitlesImg) {\n      this._gameTitlesImg = new Image();\n      this._gameTitlesImg.src = settings.sprites.titles;\n    }\n\n    return this._gameTitlesImg;\n  }\n\n  private _gameTitleSprite: ISpriteElement;\n  get gameTitleSprite(): ISpriteElement {\n    if (!this._gameTitleSprite) {\n      this._gameTitleSprite = {\n        sprite: this.gameTitlesImg,\n        sx: 0,\n        sy: 0,\n        sWidth: 730,\n        sHeight: 65,\n        dx: settings.worldWidth / 8,\n        dy: settings.worldHeight / 6,\n        dWidth: settings.worldWidth / 1.3,\n        dHeight: settings.worldHeight / 14.2\n      }\n    }\n\n    return this._gameTitleSprite;\n  }\n\n  private _gameOverSprite: ISpriteElement;\n  get gameOverSprite(): ISpriteElement {\n    if (!this._gameOverSprite) {\n      this._gameOverSprite = {\n        sprite: this.gameTitlesImg,\n        sx: 0,\n        sy: 90,\n        sWidth: 373,\n        sHeight: 50,\n        dx: settings.worldWidth / 7.1,\n        dy: settings.worldHeight / 5.8,\n        dWidth: settings.worldWidth / 1.3,\n        dHeight: settings.worldHeight / 12.6\n      }\n    }\n\n    return this._gameOverSprite;\n  }\n\n  private _bottomCloudsImg: HTMLImageElement;\n  get bottomCloudsImg(): HTMLImageElement {\n    if (!this._bottomCloudsImg) {\n      this._bottomCloudsImg = new Image();\n      this._bottomCloudsImg.src = settings.sprites.bottomClouds;\n    }\n\n    return this._bottomCloudsImg;\n  }\n\n  private _cloud1Img: HTMLImageElement;\n  get cloud1Img(): HTMLImageElement {\n    if (!this._cloud1Img) {\n      this._cloud1Img = new Image();\n      this._cloud1Img.src = settings.sprites.cloud1;\n    }\n\n    return this._cloud1Img;\n  }\n\n  private _cloud2Img: HTMLImageElement;\n  get cloud2Img(): HTMLImageElement {\n    if (!this._cloud2Img) {\n      this._cloud2Img = new Image();\n      this._cloud2Img.src = settings.sprites.cloud2;\n    }\n\n    return this._cloud2Img;\n  }\n\n  private _pipeTopImg: HTMLImageElement;\n  get pipeTopImg(): HTMLImageElement {\n    if (!this._pipeTopImg) {\n      this._pipeTopImg = new Image();\n      this._pipeTopImg.src = settings.sprites.pipeTop;\n    }\n\n    return this._pipeTopImg;\n  }\n\n  private _pipeBottomImg: HTMLImageElement;\n  get pipeBottomImg(): HTMLImageElement {\n    if (!this._pipeBottomImg) {\n      this._pipeBottomImg = new Image();\n      this._pipeBottomImg.src = settings.sprites.pipeBottom;\n    }\n\n    return this._pipeBottomImg;\n  }\n\n  private _startButtonSprites: ISpriteElement[];\n  get startButtonSprites(): ISpriteElement[] {\n    if (this._startButtonSprites) return this._startButtonSprites;\n\n    const spriteCoordinatesX = [0, 188, 379];\n    const spriteCoordinateY = 150;\n    const spriteSize = {\n      sWidth: 185,\n      sHeight: 60\n    };\n\n    this._startButtonSprites = [0, 1 ,2].map(spriteNumber => {\n      return {\n        sprite: this.gameTitlesImg,\n        sx: spriteCoordinatesX[spriteNumber],\n        sy: spriteCoordinateY,\n        sWidth: spriteSize.sWidth,\n        sHeight: spriteSize.sHeight,\n        dx: settings.worldWidth / 4,\n        dy: settings.worldHeight / 1.57,\n        dWidth: settings.worldWidth / 2.13,\n        dHeight: settings.worldHeight / 16.22\n      }\n    });\n\n    return this._startButtonSprites;\n  }\n\n  private _againButtomSprites: ISpriteElement[];\n  get againButtonSprites(): ISpriteElement[] {\n    if (this._againButtomSprites) return this._againButtomSprites;\n\n    const spriteXCoordinates = [0, 183, 363];\n    const spriteYCoordinate = 232;\n    const spriteSizes = { sWidth: 185, sHeight: 60 };\n\n    this._againButtomSprites = [0, 1, 2].map(spriteNumber => {\n      return {\n        sprite: this.gameTitlesImg,\n        sx: spriteXCoordinates[spriteNumber],\n        sy: spriteYCoordinate,\n        sWidth: spriteSizes.sWidth,\n        sHeight: spriteSizes.sHeight,\n        dx: settings.worldWidth / 4,\n        dy: settings.worldHeight / 1.6,\n        dWidth: settings.worldWidth / 2.13,\n        dHeight: settings.worldHeight / 16.22\n      }\n    });\n\n    return this._againButtomSprites;\n  }\n\n  private _planeSprites: ISpriteElement[];\n  private get planeSprites(): ISpriteElement[] {\n    if (this._planeSprites) return this._planeSprites;\n\n    const spriteXCoordinates = [-3.4, 80, 170.4, 259, 344.9, 442.4];\n    const spriteYCoordinate = 0;\n    const spriteSize = {\n      sWidth: 80,\n      sHeight: 80\n    };\n\n    // ToDo: rename sprite to image in ISprite and ISpriteElement\n    this._planeSprites = [0, 1, 2, 3, 4, 5].map(spriteNumber => {\n      const spriteHeight = settings.worldHeight / 5.68;\n      return {\n        sprite: this.planeImg,\n        sx: spriteXCoordinates[spriteNumber],\n        sy: spriteYCoordinate,\n        sWidth: spriteSize.sWidth,\n        sHeight: spriteSize.sHeight,\n        dx: settings.worldWidth / 10,\n        dy: settings.worldHeight / 2 - spriteHeight / 2,\n        dWidth: settings.worldWidth / 3.2,\n        dHeight: spriteHeight\n      }\n    });\n\n    return this._planeSprites;\n  }\n\n  private _planeUpSprites: ISpriteElement[];\n  get planeUpSprites(): ISpriteElement[] {\n    if (this._planeUpSprites) return this._planeUpSprites;\n\n    this._planeUpSprites = this.planeSprites.slice(3, 6);\n    return this._planeUpSprites;\n  }\n\n  private _planeDownSprites: ISpriteElement[];\n  get planeDownSprites(): ISpriteElement[] {\n    if (this._planeDownSprites) return this._planeDownSprites;\n\n    this._planeDownSprites = this.planeSprites.slice(0, 3);\n    return this._planeDownSprites;\n  }\n\n  public static getInstance(): GameResourcesService {\n    if (!GameResourcesService.instance) {\n      GameResourcesService.instance = new GameResourcesService();\n    }\n\n    return GameResourcesService.instance;\n  }\n}\n\nexport default GameResourcesService.getInstance();","import settings from \"@src/settings\";\nimport {IHitbox, IPoint, ISprite, ISpriteElement, ITextProperties} from \"./models\";\n\n/**\n * Return random number between min and max params\n * @param min\n * @param max\n */\nexport function randomNumber(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Checks if point wihin coordinates of the box.\n * @param point screen point in global canvas coordinates\n * @param box box size in game field coordinates (without scale factor applied)\n */\nexport function checkPointWithinBox(point: IPoint, box: IHitbox): boolean {\n  // Correct box to scale\n  const correctedBox = {\n    x1: box.x1 * settings.scaleFactor,\n    x2: box.x2 * settings.scaleFactor,\n    y1: box.y1 * settings.scaleFactor,\n    y2: box.y2 * settings.scaleFactor\n  };\n\n  const pointWithinX = point.x > correctedBox.x1 && point.x < correctedBox.x2;\n  const pointWithinY = point.y > correctedBox.y1 && point.y < correctedBox.y2;\n  return pointWithinX && pointWithinY;\n}\n\n/**\n * Checks if box1 collide with box 2\n * @param box1\n * @param box2\n */\nexport function checkHitboxCollision(box1: IHitbox, box2: IHitbox): boolean {\n  if (checkPointWithinBox({ x: box1.x1 * settings.scaleFactor, y: box1.y1 * settings.scaleFactor }, box2)) return true;\n  if (checkPointWithinBox({ x: box1.x2 * settings.scaleFactor, y: box1.y1 * settings.scaleFactor }, box2)) return true;\n  if (checkPointWithinBox({ x: box1.x1 * settings.scaleFactor, y: box1.y2 * settings.scaleFactor }, box2)) return true;\n  if (checkPointWithinBox({ x: box1.x2 * settings.scaleFactor, y: box1.y2 * settings.scaleFactor }, box2)) return true;\n\n  return false;\n}\n\n/**\n * Draws sprite on the passed context\n * @param sprite\n * @param context\n */\nexport function drawSprite(sprite: ISprite|ISpriteElement, context: CanvasRenderingContext2D) {\n  const se = sprite as ISpriteElement;\n  const s = sprite as ISprite;\n\n  if(se.dx) {\n    context.drawImage(\n      se.sprite,\n      se.sx,\n      se.sy,\n      se.sWidth,\n      se.sHeight,\n      se.dx * settings.scaleFactor,\n      se.dy * settings.scaleFactor,\n      se.dWidth * settings.scaleFactor,\n      se.dHeight * settings.scaleFactor\n    );\n    return;\n  } else {\n    context.drawImage(\n      s.sprite,\n      s.x * settings.scaleFactor,\n      s.y * settings.scaleFactor,\n      s.width * settings.scaleFactor,\n      s.height * settings.scaleFactor\n    );\n  }\n}\n\n/**\n * Renders text to context\n * @param textProps text with properties to render\n * @param context\n */\nexport function drawText(textProps: ITextProperties, context: CanvasRenderingContext2D) {\n  context.font = `${textProps.fontSize * settings.scaleFactor}px ${textProps.fontName}`;\n  const textStrokeOffset = 2;\n\n  if (textProps.shadowColor) {\n    context.fillStyle = textProps.shadowColor,\n    context.fillText(\n      textProps.text,\n      (textProps.x + textStrokeOffset) * settings.scaleFactor,\n      (textProps.y + textStrokeOffset) * settings.scaleFactor\n    );\n  }\n\n  context.fillStyle = textProps.color,\n  context.fillText(\n    textProps.text,\n    textProps.x * settings.scaleFactor,\n    textProps.y * settings.scaleFactor\n  );\n}\n\n/**\n * Draws rectangle to the context\n * @param x upper left corner X coordinates\n * @param y upper left corner Y coordinates\n * @param width rectangle width\n * @param height rectangle height\n * @param fillStyle fill style for rectangle\n * @param context context to draw\n */\nexport function drawRectangle(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  fillStyle: string | CanvasGradient | CanvasPattern,\n  context: CanvasRenderingContext2D\n) {\n  context.fillStyle = fillStyle;\n  context.fillRect(\n    x * settings.scaleFactor,\n    y * settings.scaleFactor,\n    width * settings.scaleFactor,\n    height * settings.scaleFactor\n  );\n}","import settings from '@src/settings';\nimport gameResourcesService from '@src/resources';\nimport { AnimationState, ISprite } from '@src/models';\nimport { drawSprite } from '@src/utils';\n\n/**\n * Draws bottom clouds line\n */\nexport class BottomClouds {\n  animationState = AnimationState.play;\n  cloudsSpeed = 2;\n  private cloudsWidth = settings.worldWidth / 1.28;\n  private cloudsHeight = settings.worldHeight / 5.68;\n  private cloudTiles: ISprite[] = [];\n\n  constructor(private context: CanvasRenderingContext2D) {\n    let currentSpritePosition = 0;\n    // Init tiles according to canvas width\n    while (currentSpritePosition <= settings.worldWidth) {\n      this.cloudTiles.push({\n        sprite: gameResourcesService.bottomCloudsImg,\n        x: currentSpritePosition,\n        y: settings.worldHeight - this.cloudsHeight,\n        width: this.cloudsWidth,\n        height: this.cloudsHeight,\n      });\n      currentSpritePosition += this.cloudsWidth - 1; // -1 to remove small gap artifact between clouds\n    }\n  }\n\n  /**\n   * Draws bottom cloud line\n   */\n  draw() {\n    if (this.animationState === AnimationState.play) {\n      // Move all cloud tiles across X axis\n      this.cloudTiles.map(cloud => cloud.x -= this.cloudsSpeed);\n\n      // Remove off screen tile\n      this.cloudTiles = this.cloudTiles.filter(cloud => cloud.x + cloud.width >= 0);\n    }\n\n    // Add tile to be drawn\n    const lastCloud = this.cloudTiles[this.cloudTiles.length - 1];\n    // Coordinates of the right most cloud (-1px to remove small gap artifact between sprites)\n    const lastCloudRightBorderCoordinate = lastCloud.x + lastCloud.width - 1;\n\n    // When right most cloud fully drawn to display add next one\n    if (lastCloudRightBorderCoordinate <= settings.worldWidth) {\n      this.cloudTiles.push({\n        sprite: gameResourcesService.bottomCloudsImg,\n        x: lastCloudRightBorderCoordinate,\n        y: settings.worldHeight - this.cloudsHeight,\n        width: this.cloudsWidth,\n        height: this.cloudsHeight\n      });\n    }\n\n    for (const cloud of this.cloudTiles) {\n      drawSprite(cloud, this.context);\n    }\n  }\n}","import { IHitbox, IPoint, ISprite, ISpriteElement, MouseEventTypeEnum } from \"@src/models\";\nimport { checkPointWithinBox, drawSprite } from \"@src/utils\";\n\n/**\n * Represent button state\n */\nexport enum ButtonStateEnum {\n  normal = 'normal',\n  hover = 'hover',\n  down = 'down'\n}\n\n/**\n * Class for button object\n */\nexport class Button {\n  buttonState = ButtonStateEnum.normal;\n\n  /**\n   * Returns button hitbox\n   */\n  get hitbox(): IHitbox {\n    const sprite = this.spriteNormal as ISprite;\n    const spriteElement = this.spriteNormal as ISpriteElement;\n\n    if (spriteElement.dx) {\n      return {\n        x1: spriteElement.dx,\n        x2: spriteElement.dx + spriteElement.dWidth,\n        y1: spriteElement.dy,\n        y2: spriteElement.dy + spriteElement.dHeight\n      };\n    }\n\n    return {\n      x1: sprite.x,\n      x2: sprite.x + sprite.width,\n      y1: sprite.y,\n      y2: sprite.y + sprite.height\n    };\n  }\n\n  private hoverCallback: () => void;\n  private pressCallback: () => void;\n  private upCallback: () => void;\n  private clickCallback: () => void;\n\n  constructor(\n    private context: CanvasRenderingContext2D,\n    private spriteNormal: ISprite|ISpriteElement,\n    private spriteHover: ISprite|ISpriteElement,\n    private spritePress: ISprite|ISpriteElement,\n    ) {\n  }\n\n  /**\n   * Handles mouse event from canvas\n   * @param point pointer coordinates\n   * @param eventType type of mouse events.\n   */\n  mouseEventHandler(point: IPoint, eventType: MouseEventTypeEnum) {\n    const pointerOverButton = checkPointWithinBox(point, this.hitbox);\n\n    switch (eventType) {\n      case MouseEventTypeEnum.move:\n        this.mouseMove(pointerOverButton);\n        return;\n      case MouseEventTypeEnum.down:\n        this.mouseDown(pointerOverButton);\n        return;\n      case MouseEventTypeEnum.up:\n        this.mouseUp();\n        return;\n      default:\n        return;\n    }\n  }\n\n  /**\n   * Registers callback for hover event over the button\n   * @param callback\n   */\n  onHover(callback: () => void) {\n    this.hoverCallback = callback;\n  }\n\n  /**\n   * Registers callback for button press\n   * @param callback\n   */\n  onPress(callback: () => void) {\n    this.pressCallback = callback;\n  }\n\n  /**\n   * Register callback when button was released after press\n   * @param callback\n   */\n  onUp(callback: () => void) {\n    this.upCallback = callback;\n  }\n\n  /**\n   * Register callback of button click\n   * @param callback\n   */\n  onClick(callback: () => void) {\n    this.clickCallback = callback;\n  }\n\n  draw(): void {\n    switch (this.buttonState) {\n      case ButtonStateEnum.hover:\n        drawSprite(this.spriteHover, this.context);\n        break;\n      case ButtonStateEnum.down:\n        drawSprite(this.spritePress, this.context);\n        break;\n      default:\n        drawSprite(this.spriteNormal, this.context);\n        break;\n    }\n  }\n\n  /**\n   * Process mouse move event\n   * @param isPointerOverButton\n   */\n  private mouseMove(isPointerOverButton: boolean) {\n    if (isPointerOverButton && this.buttonState !== ButtonStateEnum.down) {\n      this.buttonState = ButtonStateEnum.hover;\n      if (this.hoverCallback) {\n        this.hoverCallback();\n      }\n    }\n\n    if (!isPointerOverButton && this.buttonState === ButtonStateEnum.hover) {\n      this.buttonState = ButtonStateEnum.normal;\n    }\n  }\n\n  /**\n   * Process mouse down event\n   * @param isPointerOverButton\n   */\n  private mouseDown(isPointerOverButton: boolean) {\n    if (isPointerOverButton) {\n      this.buttonState = ButtonStateEnum.down;\n\n      if (this.pressCallback) {\n        this.pressCallback();\n      }\n    }\n  }\n\n  /**\n   * Process mouse up event\n   */\n  private mouseUp() {\n    if (this.buttonState == ButtonStateEnum.down) {\n      this.buttonState = ButtonStateEnum.normal;\n\n      if (this.upCallback) {\n        this.upCallback();\n      }\n\n      if (this.clickCallback) {\n        this.clickCallback();\n      }\n    }\n  }\n}","import { AnimationState, IHitbox, IPoint, ISpriteElement, PlaneStatesEnum } from '@src/models';\nimport gameResources from '@src/resources';\nimport settings from '@src/settings';\nimport { drawSprite } from '@src/utils';\n\nconst PLANE_SETTINGS = {\n  spritesCount: 3,\n  spriteFrameLimit: 5,\n  hitboxScale: 0.7\n};\n\nexport enum PLANE_POSITIONS {\n  screenCenter,\n  gameStart\n}\n\n/**\n * Class for plane sprite\n */\nexport class Plane {\n  animationState = AnimationState.play;\n  position: IPoint;\n  planeSprite: ISpriteElement;\n\n  private _planeState = PlaneStatesEnum.flyDown;\n  private spriteNumber = 0;\n  private currentSpriteFrame = 0;\n\n\n  /**\n   * Returns plane hitbox.\n   */\n  get hitbox(): IHitbox {\n    // Make hitbox smaller than actual sprite size.\n    const scaleFactor = 1 - PLANE_SETTINGS.hitboxScale;\n    return {\n      x1: this.position.x + this.planeSprite.dWidth * scaleFactor,\n      y1: this.position.y + this.planeSprite.dHeight * scaleFactor,\n      x2: (this.planeSprite.dWidth + this.position.x) - (this.planeSprite.dWidth * scaleFactor),\n      y2: (this.planeSprite.dHeight + this.position.y) - (this.planeSprite.dHeight * scaleFactor)\n    };\n  }\n\n  /**\n   * Sets current plane state\n   */\n  set planeState(state: PlaneStatesEnum) {\n    this._planeState = state;\n  }\n\n  constructor(private context: CanvasRenderingContext2D) {\n    this._planeState = PlaneStatesEnum.flyDown;\n    this.planeSprite = gameResources.planeDownSprites[0];\n    this.position = {\n      x: this.planeSprite.dx,\n      y: this.planeSprite.dy\n    };\n  }\n\n  /**\n   * Draws plane on the game context\n   */\n  draw() {\n    let spriteNumber = this.getSpriteNumber();\n\n    let planeSprite;\n    switch (this._planeState) {\n      case PlaneStatesEnum.flyDown:\n        planeSprite = gameResources.planeDownSprites[spriteNumber];\n        break;\n      case PlaneStatesEnum.flyUp:\n        planeSprite = gameResources.planeUpSprites[spriteNumber];\n          break;\n      default:\n        break;\n    }\n\n    // Don't mutate initial sprite\n    const spriteToDraw: ISpriteElement = {\n      ...planeSprite,\n      dx: this.position.x,\n      dy: this.position.y\n    };\n\n    drawSprite(spriteToDraw, this.context);\n  }\n\n  setPosition(planePosition: PLANE_POSITIONS) {\n    switch (planePosition) {\n      case PLANE_POSITIONS.screenCenter:\n        this.position = {\n          x: settings.worldWidth / 2 - this.planeSprite.dWidth / 2,\n          y: settings.worldHeight / 2 - this.planeSprite.dHeight / 2\n        };\n        break;\n      case PLANE_POSITIONS.gameStart:\n      default:\n        this.position = {\n          x: settings.worldWidth / 6,\n          y: settings.worldHeight / 2 - this.planeSprite.dHeight / 2\n        };\n        break;\n    }\n  }\n\n  /**\n   * Returns sprite number to draw\n   */\n  private getSpriteNumber(): number {\n    if (this.animationState === AnimationState.play) {\n      this.currentSpriteFrame++;\n    }\n\n    if (this.currentSpriteFrame === PLANE_SETTINGS.spriteFrameLimit) {\n      this.currentSpriteFrame = 0;\n      this.spriteNumber++;\n\n      this.spriteNumber = this.spriteNumber === PLANE_SETTINGS.spritesCount ? 0 : this.spriteNumber;\n    }\n\n    return this.spriteNumber;\n  }\n}","import settings from '@src/settings';\nimport {drawRectangle} from '@src/utils';\nexport class GameWorld {\n\n  private _skyGradient: CanvasGradient;\n  get skyGradient() {\n    if (this._skyGradient) return this._skyGradient;\n\n    this._skyGradient = this.context.createLinearGradient(0, 0, 0, settings.worldHeight);\n    this._skyGradient.addColorStop(0, settings.worldBackground.top);\n    this._skyGradient.addColorStop(1, settings.worldBackground.bottom);\n  }\n\n  constructor(private context: CanvasRenderingContext2D) {\n  }\n\n  draw() {\n    drawRectangle(0, 0, settings.worldWidth, settings.worldHeight, this.skyGradient, this.context);\n  }\n}","import gameResources from '@src/resources';\nimport settings from '@src/settings';\nimport { drawSprite, drawText } from '@src/utils';\n\nexport class Titles {\n  constructor(private context: CanvasRenderingContext2D) {}\n\n  /**\n   * Renders game name\n   */\n  drawGameTitle() {\n    drawSprite(gameResources.gameTitleSprite, this.context);\n  }\n\n  /**\n   * Renders game over title\n   */\n  drawGameOverTitle() {\n    drawSprite(gameResources.gameOverSprite, this.context);\n  }\n\n  /**\n   * Renders current score\n   * @param score\n   */\n  drawScore(score: number = 0) {\n    const fontWidth = 18;\n    const offset = score.toString().length * fontWidth;\n\n    drawText({\n      text: score.toString(),\n      x: settings.worldWidth / 2 - offset,\n      y: settings.worldHeight / 7,\n      color: 'white',\n      fontSize: 64,\n      fontName: 'monospace',\n      shadowColor: '#04132358'\n    }, this.context);\n  }\n\n  /**\n   * Renders final score info\n   * @param score\n   */\n  drawFinalScore(score: number = 0) {\n    const finalScore = `score: ${score}`;\n\n    const letterWidth = 10;\n    const offset = finalScore.toString().length * letterWidth;\n\n    drawText({\n      text: finalScore.toString(),\n      x: settings.worldWidth / 2 - offset,\n      y: settings.worldHeight / 2.7,\n      color: 'white',\n      fontSize: 36,\n      fontName: 'monospace',\n      shadowColor: '#04132358'\n    }, this.context);\n  }\n}","import gameResources from '@src/resources';\nimport settings from '@src/settings';\nimport { AnimationState, ISprite } from '@src/models';\nimport { drawSprite, randomNumber } from '@src/utils';\n\ninterface ICloudSprite extends ISprite {\n  speed: number;\n}\n\nconst CLOUDS_SETTINGS = {\n  cloudsCount: 5,\n  speed: 3,\n  minSize: 1,\n  maxSize: 7,\n  minCloudHeight: 30, // Minimal height of the cloud from the lower boundary of the canvas\n  cloud1: {\n    width: 40,\n    height: 30\n  },\n  cloud2: {\n    width: 55,\n    height: 30\n  }\n}\n\nexport class Clouds {\n\n  animationState = AnimationState.play;\n  private clouds: ICloudSprite[] = [];\n\n  constructor(private context: CanvasRenderingContext2D) {\n    const cloud1 = this.getNewCloud();\n    const cloud2 = this.getNewCloud();\n    const cloud3 = this.getNewCloud();\n    // Set clouds at the random positions at the start\n    this.clouds.push(\n      {\n        ...cloud1,\n        x: randomNumber(0, settings.worldWidth)\n      },\n      {\n        ...cloud2,\n        x: randomNumber(0, settings.worldWidth)\n      },\n      {\n        ...cloud3,\n        x: randomNumber(0, settings.worldWidth)\n      }\n    );\n  }\n\n  draw() {\n    if (this.animationState === AnimationState.play) {\n      this.clouds.map(cloud => cloud.x -= cloud.speed)\n      this.clouds = this.clouds.filter(cloud => cloud.x + cloud.width >= 0);\n\n      if (!this.clouds.length) {\n        this.clouds.push(this.getNewCloud());\n      }\n    }\n\n    for (const cloud of this.clouds) {\n      drawSprite(cloud, this.context);\n    }\n  }\n\n  /**\n   * Generates cloud sprite at the random Y position behind right border of the screen\n   * @returns generated sprite with speed set\n   */\n  getNewCloud(): ICloudSprite {\n    const cloudSpriteNumber = randomNumber(1, 2);\n    const yCoordinate = randomNumber(0, settings.worldHeight - CLOUDS_SETTINGS.minCloudHeight);\n    const cloudSize = randomNumber(CLOUDS_SETTINGS.minSize, CLOUDS_SETTINGS.maxSize);\n\n    return {\n      sprite: cloudSpriteNumber === 1 ? gameResources.cloud1Img : gameResources.cloud2Img,\n      x: settings.worldWidth,\n      y: yCoordinate,\n      width: (cloudSpriteNumber === 1 ? CLOUDS_SETTINGS.cloud1.width : CLOUDS_SETTINGS.cloud2.width) * cloudSize,\n      height: (cloudSpriteNumber === 1 ? CLOUDS_SETTINGS.cloud1.height : CLOUDS_SETTINGS.cloud2.height) * cloudSize,\n      speed: CLOUDS_SETTINGS.speed * cloudSize\n    };\n  }\n}","import resources from '@src/resources';\nimport { BottomClouds } from \"@src/objects/bottom-clouds\";\nimport { Button } from \"@src/objects/button\";\nimport { Plane, PLANE_POSITIONS } from \"@src/objects/plane\";\nimport { GameWorld } from \"@src/objects/world\";\nimport { Titles } from '@src/objects/titles';\nimport { GameSceneEnum, IGameScene, IPoint, MouseEventTypeEnum, PlaneStatesEnum } from '@src/models';\nimport {Clouds} from '@src/objects/clouds';\nexport class TitleScreen implements IGameScene {\n\n  name: GameSceneEnum.TitleScreen;\n  goToStateCallback: (name: GameSceneEnum) => {};\n  data = {};\n\n  private world: GameWorld;\n  private bottomClouds: BottomClouds;\n  private clouds: Clouds;\n  private plane: Plane;\n  private startButton: Button;\n  private titles: Titles;\n\n  constructor(private context: CanvasRenderingContext2D) {\n    this.world = new GameWorld(this.context);\n    this.bottomClouds = new BottomClouds(this.context);\n    this.clouds = new Clouds(this.context);\n    this.titles = new Titles(this.context);\n    this.plane = new Plane(this.context);\n    this.plane.planeState = PlaneStatesEnum.flyUp;\n    this.plane.setPosition(PLANE_POSITIONS.screenCenter);\n    this.startButton = new Button(\n      this.context,\n      resources.startButtonSprites[0],\n      resources.startButtonSprites[1],\n      resources.startButtonSprites[2]\n    );\n    this.startButton.onClick(() => this.startButtonClick());\n  }\n\n  userInput(point: IPoint, eventType: MouseEventTypeEnum) {\n    this.startButton.mouseEventHandler(point, eventType);\n  }\n\n  render() {\n    this.world.draw();\n    this.bottomClouds.draw();\n    this.clouds.draw();\n    this.plane.draw();\n    this.titles.drawGameTitle();\n    this.startButton.draw();\n  }\n\n  private startButtonClick() {\n    if (this.goToStateCallback) {\n      this.goToStateCallback(GameSceneEnum.Gameplay);\n    }\n  }\n}","import { AnimationState, IHitbox, IPoint, ISprite } from '@src/models';\nimport gameResources from '@src/resources';\nimport settings from '@src/settings';\nimport { checkHitboxCollision, drawSprite, randomNumber } from '@src/utils';\n\ninterface IPipes {\n  topPipe: ISprite,\n  bottomPipe: ISprite\n}\n\nconst PIPES_SETTINGS = {\n  speed: 5,\n  width: settings.worldWidth / 4.5,\n  height: settings.worldHeight,\n  gap: settings.worldHeight / 2.3\n}\n\nexport class Pipes {\n\n  animationState = AnimationState.play;\n  position: IPoint;\n  pipesGeneration = 0;\n  private pipes: IPipes;\n\n  constructor(private context: CanvasRenderingContext2D) {\n    this.pipes = this.getPipes();\n    this.position = {\n      x: this.pipes.topPipe.x,\n      y: this.pipes.topPipe.y\n    };\n  }\n\n  /**\n   * Draws pipes using passed context\n   */\n  draw() {\n\n    if (this.animationState === AnimationState.play) {\n      this.pipes.topPipe.x -= PIPES_SETTINGS.speed;\n      this.pipes.bottomPipe.x = this.pipes.topPipe.x;\n    }\n\n    if (this.pipes.topPipe.x + PIPES_SETTINGS.width < 0 ) {\n      this.pipes = this.getPipes();\n      this.pipesGeneration++;\n    }\n\n    // Update current position after generation increase\n    // Otherwise it would be updated only on the next draw.\n    this.position.x = this.pipes.topPipe.x;\n    this.position.y = this.pipes.topPipe.y;\n\n    drawSprite(this.pipes.topPipe, this.context);\n    drawSprite(this.pipes.bottomPipe, this.context);\n  }\n\n  /**\n   * Returns true if passed hitbox collide with one of the pipes\n   */\n  checkCollision(hitbox: IHitbox): boolean {\n    const topPipeHitbox: IHitbox = {\n      x1: this.pipes.topPipe.x,\n      x2: this.pipes.topPipe.x + this.pipes.topPipe.width,\n      y1: this.pipes.topPipe.y,\n      y2: this.pipes.topPipe.y + this.pipes.topPipe.height\n    };\n    const bottomPipeHibox: IHitbox = {\n      x1: this.pipes.bottomPipe.x,\n      x2: this.pipes.bottomPipe.x + this.pipes.bottomPipe.width,\n      y1: this.pipes.bottomPipe.y,\n      y2: this.pipes.bottomPipe.y + this.pipes.bottomPipe.height\n    };\n\n    if (checkHitboxCollision(hitbox, topPipeHitbox) || checkHitboxCollision(hitbox, bottomPipeHibox)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Creates pipe objects\n   */\n  private getPipes(): IPipes {\n    const pipesOffset = randomNumber(PIPES_SETTINGS.gap / 2, settings.worldHeight - PIPES_SETTINGS.gap / 2);\n\n    let topPipeOffset = (0 - PIPES_SETTINGS.height) + pipesOffset - PIPES_SETTINGS.gap / 2;\n    let bottomPipeOffset = pipesOffset + PIPES_SETTINGS.gap / 2;\n\n    return {\n      topPipe: {\n        sprite: gameResources.pipeTopImg,\n        x: settings.worldWidth,\n        y: topPipeOffset,\n        width: PIPES_SETTINGS.width,\n        height: PIPES_SETTINGS.height\n      },\n      bottomPipe: {\n        sprite: gameResources.pipeBottomImg,\n        x: settings.worldWidth,\n        y: bottomPipeOffset,\n        width: PIPES_SETTINGS.width,\n        height: PIPES_SETTINGS.height\n      }\n    };\n  }\n}","import settings from \"@src/settings\";\nimport { BottomClouds } from \"@src/objects/bottom-clouds\";\nimport { Clouds } from \"@src/objects/clouds\";\nimport { AnimationState, GameSceneEnum, IGameScene, IPoint, MouseEventTypeEnum, PlaneStatesEnum } from \"@src/models\";\nimport { Pipes } from \"@src/objects/pipes\";\nimport { Plane, PLANE_POSITIONS } from \"@src/objects/plane\";\nimport { Titles } from \"@src/objects/titles\";\nimport { GameWorld } from \"@src/objects/world\";\n\nexport class Gameplay implements IGameScene {\n  data = {\n    score: 0\n  };\n  goToStateCallback: (name: GameSceneEnum) => void;\n  updateGameScoreCallback: (score: number) => void;\n  name = GameSceneEnum.Gameplay;\n  isGameOver = false;\n  gameOverSequenceFrames = 90;\n  planePosition: IPoint;\n  planeDeltaY = 0;\n  pipesGeneration: number;\n\n  private world: GameWorld;\n  private bottomClouds: BottomClouds;\n  private plane: Plane;\n  private clouds: Clouds;\n  private titles: Titles;\n  private pipes: Pipes;\n\n  constructor(private context: CanvasRenderingContext2D) {\n    this.world = new GameWorld(this.context);\n    this.bottomClouds = new BottomClouds(this.context);\n    this.clouds = new Clouds(this.context);\n    this.plane = new Plane(this.context);\n    this.plane.planeState = PlaneStatesEnum.flyDown;\n    this.plane.setPosition(PLANE_POSITIONS.gameStart);\n    this.planePosition = this.plane.position;\n    this.pipes = new Pipes(this.context);\n    this.pipesGeneration = -1;\n    this.titles = new Titles(this.context);\n  }\n\n  userInput(point: IPoint, eventType: MouseEventTypeEnum) {\n    if (this.isGameOver) return;\n\n    if (eventType == MouseEventTypeEnum.down) {\n      this.planeFlyUp();\n    }\n  };\n\n  render() {\n    if (this.checkCollision()) {\n      this.isGameOver = true;\n      this.renderGameOverSequence();\n      return;\n    }\n\n    this.checkCollision();\n    this.renderGamePlaySequence();\n  };\n\n  /**\n   * Renders gameplay sequence.\n   */\n  renderGamePlaySequence() {\n    this.updateScore();\n    this.planeflyDown();\n\n    this.world.draw();\n    this.bottomClouds.draw();\n    this.clouds.draw()\n    this.pipes.draw();\n    this.plane.draw();\n    this.titles.drawScore(this.data.score);\n  }\n\n  /**\n   * Renders game over sequence\n   */\n  renderGameOverSequence() {\n    this.gameOverSequenceFrames -= 1;\n    if (this.gameOverSequenceFrames === 0) {\n      this.goToStateCallback(GameSceneEnum.ScoreScreen);\n    }\n\n    this.bottomClouds.animationState = AnimationState.pause;\n    this.clouds.animationState = AnimationState.pause;\n    this.plane.animationState = AnimationState.pause;\n    this.pipes.animationState = AnimationState.pause;\n\n    this.world.draw();\n    this.bottomClouds.draw();\n    this.clouds.draw()\n    this.pipes.draw();\n    this.plane.draw();\n    this.titles.drawScore(this.data.score);\n  }\n\n  /**\n   * Makes plane to fly down\n   */\n  private planeflyDown() {\n    this.planeDeltaY -= settings.gravity;\n    this.planePosition.y -= this.planeDeltaY;\n    if (this.planeDeltaY < 0) {\n      this.plane.planeState = PlaneStatesEnum.flyDown;\n    }\n    if (this.planeDeltaY >= 0) {\n      this.plane.planeState = PlaneStatesEnum.flyUp;\n      if (this.planePosition.y < 0) {\n        this.planeDeltaY = 0;\n      }\n    }\n\n    // //ToDo: Remove me after debugging is done.\n    // this.autoFlyUp();\n  }\n\n  /**\n   * Makes plane fly up (for debug purposes)\n   */\n  private autoFlyUp() {\n    if (this.planePosition.y > settings.worldHeight * 0.5 && this.planePosition.y < settings.worldHeight * 0.6) {\n      this.planeFlyUp();\n    }\n  }\n\n  /**\n   * Makes plane to fly up\n   */\n  private planeFlyUp() {\n    this.planeDeltaY = settings.defaultPlaneDeltaY;\n  }\n\n  /**\n   * Updates game score\n   */\n  private updateScore() {\n    if (this.plane.position.x > this.pipes.position.x && this.pipesGeneration != this.pipes.pipesGeneration) {\n      this.pipesGeneration = this.pipes.pipesGeneration;\n      this.data.score++;\n\n      if(this.updateGameScoreCallback) {\n        this.updateGameScoreCallback(this.data.score);\n      }\n    }\n  }\n\n  /**\n   * Checks if plane and pipes collide\n   */\n  private checkCollision(): boolean {\n    if (this.pipes.checkCollision(this.plane.hitbox)) {\n      return true;\n    }\n\n    if (this.plane.position.y > settings.worldHeight) {\n      return true;\n    }\n\n    return false;\n  }\n}","import resources from '@src/resources';\nimport {BottomClouds} from \"@src/objects/bottom-clouds\";\nimport {Button} from \"@src/objects/button\";\nimport {GameSceneEnum, IGameScene, IPoint, MouseEventTypeEnum} from \"@src/models\";\nimport {Titles} from \"@src/objects/titles\";\nimport {GameWorld} from \"@src/objects/world\";\n\nexport class ScoreScreen implements IGameScene {\n  data = {\n    score: 0\n  };\n  name = GameSceneEnum.ScoreScreen;\n\n  private world: GameWorld;\n  private bottomClouds: BottomClouds;\n  private titles: Titles;\n  private againButton: Button;\n\n  constructor(private context: CanvasRenderingContext2D) {\n    this.world = new GameWorld(this.context);\n    this.bottomClouds = new BottomClouds(this.context);\n    this.titles = new Titles(this.context);\n    this.againButton = new Button(\n      this.context,\n      resources.againButtonSprites[0],\n      resources.againButtonSprites[1],\n      resources.againButtonSprites[2]\n    );\n    this.againButton.onClick(() => this.goToStateCallback(GameSceneEnum.TitleScreen));\n  }\n\n  render() {\n    this.world.draw();\n    this.bottomClouds.draw();\n    this.titles.drawGameOverTitle();\n    this.titles.drawFinalScore(this.data.score);\n    this.againButton.draw();\n  }\n\n  goToStateCallback: (name: GameSceneEnum) => void;\n  userInput(point: IPoint, eventType: MouseEventTypeEnum) {\n    this.againButton.mouseEventHandler(point, eventType);\n  };\n\n}","import \"normalize.css/normalize.css\";\nimport './style.scss';\nimport { Game } from './app';\n\nconst game = new Game();\ngame.init();\n\n// if('serviceWorker' in navigator) {\n//   window.addEventListener('load', () => {\n//     navigator.serviceWorker.register('./service-worker.js').then(registration => {\n//       console.info('ServiceWorker registered: ', registration);\n//     }).catch(registrationError => {\n//       console.error('ServiceWorker registration failed: ', registrationError);\n//     })\n//   })\n// }","import settings from '@src/settings';\nimport { GameSceneEnum, IGameScene, IPoint, MouseEventTypeEnum } from '@src/models';\nimport { TitleScreen } from '@src/scenes/title-screen';\nimport { Gameplay } from '@src/scenes/gameplay';\nimport { ScoreScreen } from '@src/scenes/score-screen';\n\n/**\n * Game class\n * To start the game use init() function\n */\nexport class Game {\n  private gameScore = 0;\n  private context: CanvasRenderingContext2D;\n  private currentScene: IGameScene;\n  private canvas: HTMLCanvasElement;\n  /**\n   * Call to start the game\n   */\n  init() {\n    this.addCanvas();\n    this.switchGameScene(GameSceneEnum.TitleScreen);\n    this.setEventLoop();\n  }\n\n  /**\n   * Adds canvas to draw the game\n   */\n  private addCanvas() {\n    this.canvas = document.getElementById('GameCanvas') as HTMLCanvasElement;\n    this.setScale();\n\n    this.context = this.canvas.getContext('2d');\n    window.onresize = (() => this.setScale());\n\n    this.canvas.onmousemove = (e) => this.userInput({x: e.offsetX, y: e.offsetY}, MouseEventTypeEnum.move);\n    this.canvas.onmousedown = (e) => this.userInput({x: e.offsetX, y: e.offsetY}, MouseEventTypeEnum.down);\n    this.canvas.onmouseup = (e) => this.userInput({x: e.offsetX, y: e.offsetY}, MouseEventTypeEnum.up);\n  }\n\n  /**\n   * Set game event loop\n   */\n  private setEventLoop() {\n    setInterval(() => {\n      this.currentScene.render();\n    }, settings.gameRefreshRate);\n  }\n\n  /**\n   * Switches game to certain scene\n   * @param sceneName scene to switch\n   */\n  switchGameScene(sceneName: GameSceneEnum) {\n    switch (sceneName) {\n      case GameSceneEnum.TitleScreen:\n        this.currentScene = new TitleScreen(this.context);\n        break;\n        case GameSceneEnum.Gameplay:\n        this.gameScore = 0;\n        this.currentScene = new Gameplay(this.context);\n\n        (this.currentScene as Gameplay).updateGameScoreCallback = (score) => this.updateGameScore(score);\n        break;\n      case GameSceneEnum.ScoreScreen:\n        this.currentScene = new ScoreScreen(this.context);\n        (this.currentScene as ScoreScreen).data.score = this.gameScore;\n        break;\n      default:\n        this.currentScene = new TitleScreen(this.context);\n        break;\n    }\n\n    this.currentScene.goToStateCallback = (sceneName) => this.switchGameScene(sceneName);\n  }\n\n  /**\n   * Global handler for user input.\n   * @param point point on canvas\n   * @param eventType type of event (click, hover etc.)\n   */\n  userInput(point: IPoint, eventType: MouseEventTypeEnum) {\n    if (this.currentScene) {\n      this.currentScene.userInput(point, eventType);\n    }\n  }\n\n  /**\n   * Updates game score\n   * @param score game score\n   */\n  updateGameScore(score: number) {\n    this.gameScore = score;\n  }\n\n  /**\n   * Recalculate window scale\n   */\n  setScale() {\n    settings.scaleFactor = this.canvas.clientHeight / settings.worldHeight; // Set scale factor for graphics\n    // Resize canvas according to window size (so graphics could scale properly without pixelization)\n    this.canvas.height = this.canvas.clientHeight;\n    this.canvas.width = this.canvas.clientHeight * settings.aspectRatio;\n  }\n}"],"sourceRoot":""}